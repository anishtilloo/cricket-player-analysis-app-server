generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                          String              @id @unique @default(uuid())
  name                        String              @db.VarChar(255)
  email                       String              @unique
  password                    String
  avatar                      String?             @default("default.png")
  backgroundImg               String?
  role                        RoleEnumType?       @default(USER)
  verificationCode            String?             @db.Text @unique
  isEmailVerified             Boolean  @default(false)
  createdAt                   DateTime            @default(now())
  updatedAt                   DateTime            @updatedAt
  token                       Token[]
  playingEleven               PlayingEleven[]
  yourTeam                    YourTeam[]

  @@unique([email, verificationCode])
  @@index([email, verificationCode])
  @@map("Users")
}

model Token {
  id                          String              @id @unique @default(uuid())
  token                       String
  type                        TokenType
  expires                     DateTime
  blacklisted                 Boolean
  createdAt                   DateTime            @default(now())
  userId                      String                 
  user                        User                @relation(fields: [userId], references: [id], onDelete: Cascade)  

  @@map("Tokens")
}

model Team {
  id                          String               @id @default(uuid())
  teamName                    String               @db.VarChar(255)
  ownerName                   String
  coach                       Json?
  netWorth                    Float?
  teamLogo                    String?
  players                     Player[]
  playingElevens              PlayingEleven[]

  @@unique([id, teamName])
  @@map("Teams")
}

model Player {
  id                          String                @id @default(uuid())
  playerName                  String                @db.VarChar(255)
  playerImg                   String?
  characteristics             String[]
  height                      Float
  weight                      Float
  basePrise                   Float?
  actualPrise                 Float?
  fitnessScore                Float?
  injured                     Json?
  analysis                    Json?
  physicals                   Json?
  mentalStats                 Json?
  playerType                  PLAYERTYPE
  teamId                      String?
  teamName                    String?
  team                        Team?                  @relation(fields: [teamId, teamName], references: [id, teamName])
  playingElevenId             String?
  playingEleven               PlayingEleven?         @relation(fields: [playingElevenId], references: [id])
  yourTeamId                  String?
  yourTeam                    YourTeam?              @relation(fields: [yourTeamId], references: [id])

  @@map("Players")
}

model PlayingEleven {
  id                          String                @id @unique @default(uuid())
  playingElevenTeamName       String?               @db.VarChar(255) @default("playing-eleven")
  players                     Player[]
  userId                      String             
  user                        User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  teamId                      String?
  team                        Team?                 @relation(fields: [teamId], references: [id], onDelete: Cascade)
  createdAt                   DateTime              @default(now())
  updatedAt                   DateTime              @updatedAt

  @@map("PlayingElevens")
}

model YourTeam {
  id                          String                @id @unique @default(uuid())
  yourTeamName                String?               @db.VarChar(255) @default("your-team")
  players                     Player[]
  userId                      String             
  user                        User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum RoleEnumType {
  USER
  RECRUITER
  TEAMOWNER
  ADMIN
}

enum TokenType {
  ACCESS
  REFRESH
  RESET_PASSWORD
  VERIFY_EMAIL
}

enum PLAYERTYPE {
  BATSMEN
  BATSMEN_WICKETKEEPER
  BOWLER
  ALL_ROUNDER
}
