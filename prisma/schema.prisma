generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                          BigInt              @id @unique @default(autoincrement())
  name                        String              @db.VarChar(255)
  email                       String              @unique
  password                    String
  avatar                      String?             @default("default.png")
  role                        RoleEnumType        
  isEmailVerified             Boolean             @default(false)
  createdAt                   DateTime            @default(now())
  updatedAt                   DateTime            @updatedAt
  playerId                    BigInt?
  player                      Player?
  token                       Token[]
  organizationId              BigInt?
  organization                Organization?         @relation(fields: [organizationId], references: [id], onDelete: Cascade)



  @@map("Users")
}

model Organization {
  id                          BigInt              @id @unique @default(autoincrement())
  name                        String              @db.VarChar(255)
  ownerName                   String              @db.VarChar(255)
  email                       String              @unique
  teams                       Team[]
  users                       User[]
}

model Token {
  id                          BigInt              @id @unique @default(autoincrement())
  token                       String
  type                        TokenType
  expires                     DateTime
  blacklisted                 Boolean
  createdAt                   DateTime            @default(now())
  userId                      BigInt                 
  user                        User                @relation(fields: [userId], references: [id], onDelete: Cascade)  

  @@map("Tokens")
}

model Team {
  id                          BigInt               @id @default(autoincrement())
  teamName                    String               @db.VarChar(255)
  ownerName                   String
  coach                       Json?
  netWorth                    Float?
  teamLogo                    String?
  players                     Player[]
  playingElevens              PlayingSquad[]
  organizationId              BigInt
  organization                Organization        @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([id, teamName])
  @@map("Teams")
}

model Player {
  id                          BigInt                @id @unique @default(autoincrement())
  playerName                  String                @db.VarChar(255)
  playerImg                   String?
  characteristics             String[]
  height                      Float
  weight                      Float
  basePrice                   Float?
  actualPrice                 Float?
  fitnessScore                Float?
  injured                     Json?
  analysis                    Json?
  physicals                   Json?
  mentalStats                 Json?
  playerType                  PLAYERTYPE
  teamId                      BigInt?
  teamName                    String?
  team                        Team?                 @relation(fields: [teamId, teamName], references: [id, teamName])
  playingSquadId              BigInt?
  playingSquad                PlayingSquad?         @relation(fields: [playingSquadId], references: [id])
  userId                      BigInt?               @unique
  user                        User?                 @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("Players")
}

model PlayingSquad {
  id                          BigInt                @id @unique @default(autoincrement())
  players                     Player[]          
  teamId                      BigInt
  team                        Team                  @relation(fields: [teamId], references: [id], onDelete: Cascade)
  createdAt                   DateTime              @default(now())
  updatedAt                   DateTime              @updatedAt

  @@map("PlayingSquads")
}

enum RoleEnumType {
  ADMIN
  TEAM_MANAGER
  ANALYST
  RECRUITER
  PLAYER
  USER
}

enum TokenType {
  ACCESS
  REFRESH
  RESET_PASSWORD
  VERIFY_EMAIL
}

enum PLAYERTYPE {
  BATSMEN
  BATSMEN_WICKETKEEPER
  BOWLER
  ALL_ROUNDER
}
